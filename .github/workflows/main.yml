name: Cloud Network

on:
  push:
    branches: [master]

env:
  AWS_ACCOUNT_NUMBER: ${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}

jobs:
  terraform:
    name: Build VPC Network Arquitecture
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint. New
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Debug AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}"
          echo "AWS_SESSION_TOKEN: ${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}"
          echo "AWS_REGION: ${{ secrets.TF_VAR_AWS_REGION }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.TF_VAR_AWS_REGION }}
          TF_VAR_NAME: "${{ secrets.TF_VAR_NAME }}"
          TF_VAR_ENV: "${{ secrets.TF_VAR_ENV }}"
          TF_VAR_VPC_CIDR: "${{ secrets.TF_VAR_VPC_CIDR }}"
          TF_VAR_PUBLIC_SUBNETS_CIDR: "${{ secrets.TF_VAR_PUBLIC_SUBNETS_CIDR }}"
          TF_VAR_PRIVATE_SUBNETS_CIDR: "${{ secrets.TF_VAR_PRIVATE_SUBNETS_CIDR }}"
          TF_VAR_AVAILABILITY_ZONES: "${{ secrets.TF_VAR_AVAILABILITY_ZONES }}"
          TF_VAR_EC2_AMI: "${{ secrets.TF_VAR_EC2_AMI }}"
          TF_VAR_EC2_INSTANCE_TYPE: "${{ secrets.TF_VAR_EC2_INSTANCE_TYPE }}"
          TF_VAR_ENABLE_VPN_GATEWAY: "${{ secrets.TF_VAR_ENABLE_VPN_GATEWAY }}"
          TF_VAR_ENABLE_DNS_HOSTNAMES: "${{ secrets.TF_VAR_ENABLE_DNS_HOSTNAMES }}"
          TF_VAR_ENABLE_DNS_SUPPORT: "${{ secrets.TF_VAR_ENABLE_DNS_SUPPORT }}"
          TF_VAR_TERRAFORM: "${{ secrets.TF_VAR_TERRAFORM }}"
          TF_VAR_AWS_ACCOUNT_ID: "${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}"
          TF_VAR_AWS_REGION: "${{ secrets.TF_VAR_AWS_REGION }}"
          TF_VAR_AWS_PROFILE: "${{ secrets.TF_VAR_AWS_PROFILE }}"
          TF_VAR_AWS_ACCESS_KEY_ID: "${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}"
          TF_VAR_AWS_SECRET_ACCESS_KEY: "${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}"
          TF_VAR_AWS_SESSION_TOKEN: "${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          mask-password: "false"
          aws-access-key-id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Assume AWS Role
        id: assume-role
        run: |
          role_credentials=$(aws sts assume-role --role-arn arn:aws:iam::${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}:role/github-actions-role --role-session-name GitHubActions | jq -r .Credentials)
          export AWS_ACCESS_KEY_ID=$(echo $role_credentials | jq -r .AccessKeyId)
          export AWS_SECRET_ACCESS_KEY=$(echo $role_credentials | jq -r .SecretAccessKey)
          export AWS_SESSION_TOKEN=$(echo $role_credentials | jq -r .SessionToken)

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "false"

      - name: Debug Login Output
        run: |
          echo "ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}"
          echo "AWS_REGION: ${{ steps.login-ecr.outputs.region }}"

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          chmod +x ./scripts/stage/production/version.sh
          ./scripts/stage/production/version.sh -v Hotfix
        env:
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: github-actions@github.com

      - name: Export Terraform variables
        run: |
          export TF_VAR_NAME="${{ secrets.TF_VAR_NAME }}"
          export TF_VAR_ENV="${{ secrets.TF_VAR_ENV }}"
          export TF_VAR_VPC_CIDR="${{ secrets.TF_VAR_VPC_CIDR }}"
          export TF_VAR_PUBLIC_SUBNETS_CIDR="${{ secrets.TF_VAR_PUBLIC_SUBNETS_CIDR }}"
          export TF_VAR_PRIVATE_SUBNETS_CIDR="${{ secrets.TF_VAR_PRIVATE_SUBNETS_CIDR }}"
          export TF_VAR_AVAILABILITY_ZONES="${{ secrets.TF_VAR_AVAILABILITY_ZONES }}"
          export TF_VAR_EC2_AMI="${{ secrets.TF_VAR_EC2_AMI }}"
          export TF_VAR_EC2_INSTANCE_TYPE="${{ secrets.TF_VAR_EC2_INSTANCE_TYPE }}"
          export TF_VAR_ENABLE_VPN_GATEWAY="${{ secrets.TF_VAR_ENABLE_VPN_GATEWAY }}"
          export TF_VAR_ENABLE_DNS_HOSTNAMES="${{ secrets.TF_VAR_ENABLE_DNS_HOSTNAMES }}"
          export TF_VAR_ENABLE_DNS_SUPPORT="${{ secrets.TF_VAR_ENABLE_DNS_SUPPORT }}"
          export TF_VAR_TERRAFORM="${{ secrets.TF_VAR_TERRAFORM }}"
          export TF_VAR_AWS_ACCOUNT_ID="${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}"
          export TF_VAR_AWS_REGION="${{ secrets.TF_VAR_AWS_REGION }}"
          export TF_VAR_AWS_PROFILE="${{ secrets.TF_VAR_AWS_PROFILE }}"
          export TF_VAR_AWS_ACCESS_KEY_ID="${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}"
          export TF_VAR_AWS_SECRET_ACCESS_KEY="${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}"
          export TF_VAR_AWS_SESSION_TOKEN="${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}"
          # Add other variables as needed

      # - name: Print Current Directory
      #   run: pwd

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Deploy cloud infrastructure
        run: |
          TF_VAR_NAME="${{secrets.TF_VAR_NAME}}"
          TF_VAR_ENV="${{secrets.TF_VAR_ENV}}"
          TF_VAR_VPC_CIDR="${{secrets.TF_VAR_VPC_CIDR}}"
          TF_VAR_PUBLIC_SUBNETS_CIDR="${{secrets.TF_VAR_PUBLIC_SUBNETS_CIDR}}"
          TF_VAR_PRIVATE_SUBNETS_CIDR="${{secrets.TF_VAR_PRIVATE_SUBNETS_CIDR}}"
          TF_VAR_AVAILABILITY_ZONES="${{secrets.TF_VAR_AVAILABILITY_ZONES}}"
          TF_VAR_EC2_AMI="${{secrets.TF_VAR_EC2_AMI}}"
          TF_VAR_EC2_INSTANCE_TYPE="${{secrets.TF_VAR_EC2_INSTANCE_TYPE}}"
          TF_VAR_AWS_ACCESS_KEY_ID="${{secrets.TF_VAR_AWS_ACCESS_KEY_ID}}"
          TF_VAR_AWS_SECRET_ACCESS_KEY="${{secrets.TF_VAR_AWS_SECRET_ACCESS_KEY}}"
          TF_VAR_AWS_SESSION_TOKEN="${{secrets.TF_VAR_AWS_SESSION_TOKEN}}"
          TF_VAR_AWS_ACCOUNT_ID="${{secrets.TF_VAR_AWS_ACCOUNT_ID}}"
          TF_VAR_AWS_REGION="${{secrets.TF_VAR_AWS_REGION}}"
          TF_VAR_AWS_PROFILE="${{secrets.TF_VAR_AWS_PROFILE}}"
          TF_VAR_ENABLE_VPN_GATEWAY="${{secrets.TF_VAR_ENABLE_VPN_GATEWAY}}"
          TF_VAR_ENABLE_DNS_HOSTNAMES="${{secrets.TF_VAR_ENABLE_VPN_GATEWAY}}"
          TF_VAR_ENABLE_DNS_SUPPORT="${{secrets.TF_VAR_ENABLE_DNS_SUPPORT}}"
          TF_VAR_TERRAFORM="${{secrets.TF_VAR_TERRAFORM}}"

          chmod +x ./scripts/stage/production/terraform.sh
          ./scripts/stage/production/terraform.sh

      # - name: Terraform Format
      #   id: fmt
      #   run: terraform fmt -check

      # - name: Terraform Init
      #   id: init
      #   run: terraform init

      # - name: Terraform Plan
      #   id: plan
      #   run: terraform plan

      # - name: Terraform Apply
      #   id: apply
      #   run: terraform apply -auto-approve

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      # - name: Terraform Init
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: 1.1.0
      #     tf_actions_subcommand: "init"
      #     tf_actions_working_dir: "."
      #     tf_actions_comment: true
      #     args: ""

      # - name: Terraform Plan
      #   id: plan
      #   run: terraform plan \
      #     -var 'TF_VAR_NAME=terraform-vpc' \
      #     -var 'TF_VAR_ENV=production' \
      #     -var 'TF_VAR_VPC_CIDR=10.0.0.0/16' \
      #     -var 'TF_VAR_PUBLIC_SUBNETS_CIDR=["10.0.0.0/20", "10.0.16.0/20"]' \
      #     -var 'TF_VAR_PRIVATE_SUBNETS_CIDR=["10.0.32.0/24", "10.0.33.0/24"]' \
      #     -var 'TF_VAR_AVAILABILITY_ZONES=["us-east-1a", "us-east-1b"]' \
      #     -var 'TF_VAR_EC2_AMI=ami-011899242bb902164' \
      #     -var 'TF_VAR_EC2_INSTANCE_TYPE=t2.nano' \
      #     -var 'TF_VAR_AWS_ACCESS_KEY_ID=${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}' \
      #     -var 'TF_VAR_AWS_SECRET_ACCESS_KEY=${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}' \
      #     -var 'TF_VAR_AWS_SESSION_TOKEN=${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}' \
      #     -var 'TF_VAR_AWS_ACCOUNT_ID=921283598378' \
      #     -var 'TF_VAR_AWS_REGION=us-east-1' \
      #     -var 'TF_VAR_AWS_PROFILE=system-admin' \
      #     -var 'TF_VAR_ENABLE_VPN_GATEWAY=true' \
      #     -var 'TF_VAR_ENABLE_DNS_HOSTNAMES=true' \
      #     -var 'TF_VAR_ENABLE_DNS_SUPPORT=true' \
      #     -var 'TF_VAR_TERRAFORM=true'

      # - name: Terraform Apply
      #   id: apply
      #   run: terraform apply -auto-approve \
      #     -var 'TF_VAR_NAME=terraform-vpc' \
      #     -var 'TF_VAR_ENV=production' \
      #     -var 'TF_VAR_VPC_CIDR=10.0.0.0/16' \
      #     -var 'TF_VAR_PUBLIC_SUBNETS_CIDR=["10.0.0.0/20", "10.0.16.0/20"]' \
      #     -var 'TF_VAR_PRIVATE_SUBNETS_CIDR=["10.0.32.0/24", "10.0.33.0/24"]' \
      #     -var 'TF_VAR_AVAILABILITY_ZONES=["us-east-1a", "us-east-1b"]' \
      #     -var 'TF_VAR_EC2_AMI=ami-011899242bb902164' \
      #     -var 'TF_VAR_EC2_INSTANCE_TYPE=t2.nano' \
      #     -var 'TF_VAR_AWS_ACCESS_KEY_ID=${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}' \
      #     -var 'TF_VAR_AWS_SECRET_ACCESS_KEY=${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}' \
      #     -var 'TF_VAR_AWS_SESSION_TOKEN=${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}' \
      #     -var 'TF_VAR_AWS_ACCOUNT_ID=921283598378' \
      #     -var 'TF_VAR_AWS_REGION=us-east-1' \
      #     -var 'TF_VAR_AWS_PROFILE=system-admin' \
      #     -var 'TF_VAR_ENABLE_VPN_GATEWAY=true' \
      #     -var 'TF_VAR_ENABLE_DNS_HOSTNAMES=true' \
      #     -var 'TF_VAR_ENABLE_DNS_SUPPORT=true' \
      #     -var 'TF_VAR_TERRAFORM=true'

      # - name: Terraform plan
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: 1.1.0
      #     tf_actions_subcommand: "plan"
      #     tf_actions_working_dir: "."
      #     tf_actions_comment: true
      #     args: ""
      #     # args: "/home/runner/work/aws_vpc_network/aws_vpc_network/.github/workflows/secrets.tfvars"

      #   env:
      #     TF_VAR_NAME: "${{ secrets.TF_VAR_NAME }}"
      #     TF_VAR_ENV: "${{ secrets.TF_VAR_ENV }}"
      #     TF_VAR_VPC_CIDR: "${{ secrets.TF_VAR_VPC_CIDR }}"
      #     TF_VAR_PUBLIC_SUBNETS_CIDR: "${{ secrets.TF_VAR_PUBLIC_SUBNETS_CIDR }}"
      #     TF_VAR_PRIVATE_SUBNETS_CIDR: "${{ secrets.TF_VAR_PRIVATE_SUBNETS_CIDR }}"
      #     TF_VAR_AVAILABILITY_ZONES: "${{ secrets.TF_VAR_AVAILABILITY_ZONES }}"
      #     TF_VAR_EC2_AMI: "${{ secrets.TF_VAR_EC2_AMI }}"
      #     TF_VAR_EC2_INSTANCE_TYPE: "${{ secrets.TF_VAR_EC2_INSTANCE_TYPE }}"
      #     TF_VAR_ENABLE_VPN_GATEWAY: "${{ secrets.TF_VAR_ENABLE_VPN_GATEWAY }}"
      #     TF_VAR_ENABLE_DNS_HOSTNAMES: "${{ secrets.TF_VAR_ENABLE_DNS_HOSTNAMES }}"
      #     TF_VAR_ENABLE_DNS_SUPPORT: "${{ secrets.TF_VAR_ENABLE_DNS_SUPPORT }}"
      #     TF_VAR_TERRAFORM: "${{ secrets.TF_VAR_TERRAFORM }}"
      #     TF_VAR_AWS_ACCOUNT_ID: "${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}"
      #     TF_VAR_AWS_REGION: "${{ secrets.TF_VAR_AWS_REGION }}"
      #     TF_VAR_AWS_PROFILE: "${{ secrets.TF_VAR_AWS_PROFILE }}"
      #     TF_VAR_AWS_ACCESS_KEY_ID: "${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}"
      #     TF_VAR_AWS_SECRET_ACCESS_KEY: "${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}"
      #     TF_VAR_AWS_SESSION_TOKEN: "${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}"

      # - name: Terraform apply
      #   if: ${{ github.event.inputs.terraform_action == 'apply' }}
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: 1.1.0
      #     tf_actions_subcommand: ${{ github.event.inputs.terraform_action }}
      #     tf_actions_working_dir: "."
      #     tf_actions_comment: true
      #     args: "-auto-approve"
      #     # args: "-auto-approve /home/runner/work/aws_vpc_network/aws_vpc_network/.github/workflows/secrets.tfvars"
      #     # args: '-chdir=. -auto-approve -var="TF_VAR_NAME=${{ secrets.TF_VAR_NAME }}" -var="TF_VAR_ENV=${{ secrets.TF_VAR_ENV }}" -var="TF_VAR_VPC_CIDR=${{ secrets.TF_VAR_VPC_CIDR }}" -var="TF_VAR_PUBLIC_SUBNETS_CIDR=${{ secrets.TF_VAR_PUBLIC_SUBNETS_CIDR }}" -var="TF_VAR_PRIVATE_SUBNETS_CIDR=${{ secrets.TF_VAR_PRIVATE_SUBNETS_CIDR }}" -var="TF_VAR_AVAILABILITY_ZONES=${{ secrets.TF_VAR_AVAILABILITY_ZONES }}" -var="TF_VAR_EC2_AMI=${{ secrets.TF_VAR_EC2_AMI }}" -var="TF_VAR_EC2_INSTANCE_TYPE=${{ secrets.TF_VAR_EC2_INSTANCE_TYPE }}" -var="TF_VAR_ENABLE_VPN_GATEWAY=${{ secrets.TF_VAR_ENABLE_VPN_GATEWAY }}" -var="TF_VAR_ENABLE_DNS_HOSTNAMES=${{ secrets.TF_VAR_ENABLE_DNS_HOSTNAMES }}" -var="TF_VAR_ENABLE_DNS_SUPPORT=${{ secrets.TF_VAR_ENABLE_DNS_SUPPORT }}" -var="TF_VAR_TERRAFORM=${{ secrets.TF_VAR_TERRAFORM }}" -var="TF_VAR_AWS_ACCOUNT_ID=${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}" -var="TF_VAR_AWS_REGION=${{ secrets.TF_VAR_AWS_REGION }}" -var="TF_VAR_AWS_PROFILE=${{ secrets.TF_VAR_AWS_PROFILE }}" -var="TF_VAR_AWS_ACCESS_KEY_ID=${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}" -var="TF_VAR_AWS_SECRET_ACCESS_KEY=${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}" -var="TF_VAR_AWS_SESSION_TOKEN=${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}"'
      #   env:
      #     TF_VAR_NAME: "${{ secrets.TF_VAR_NAME }}"
      #     TF_VAR_ENV: "${{ secrets.TF_VAR_ENV }}"
      #     TF_VAR_VPC_CIDR: "${{ secrets.TF_VAR_VPC_CIDR }}"
      #     TF_VAR_PUBLIC_SUBNETS_CIDR: "${{ secrets.TF_VAR_PUBLIC_SUBNETS_CIDR }}"
      #     TF_VAR_PRIVATE_SUBNETS_CIDR: "${{ secrets.TF_VAR_PRIVATE_SUBNETS_CIDR }}"
      #     TF_VAR_AVAILABILITY_ZONES: "${{ secrets.TF_VAR_AVAILABILITY_ZONES }}"
      #     TF_VAR_EC2_AMI: "${{ secrets.TF_VAR_EC2_AMI }}"
      #     TF_VAR_EC2_INSTANCE_TYPE: "${{ secrets.TF_VAR_EC2_INSTANCE_TYPE }}"
      #     TF_VAR_ENABLE_VPN_GATEWAY: "${{ secrets.TF_VAR_ENABLE_VPN_GATEWAY }}"
      #     TF_VAR_ENABLE_DNS_HOSTNAMES: "${{ secrets.TF_VAR_ENABLE_DNS_HOSTNAMES }}"
      #     TF_VAR_ENABLE_DNS_SUPPORT: "${{ secrets.TF_VAR_ENABLE_DNS_SUPPORT }}"
      #     TF_VAR_TERRAFORM: "${{ secrets.TF_VAR_TERRAFORM }}"
      #     TF_VAR_AWS_ACCOUNT_ID: "${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}"
      #     TF_VAR_AWS_REGION: "${{ secrets.TF_VAR_AWS_REGION }}"
      #     TF_VAR_AWS_PROFILE: "${{ secrets.TF_VAR_AWS_PROFILE }}"
      #     TF_VAR_AWS_ACCESS_KEY_ID: "${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}"
      #     TF_VAR_AWS_SECRET_ACCESS_KEY: "${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}"
      #     TF_VAR_AWS_SESSION_TOKEN: "${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}"

      # - name: Terraform destroy
      #   if: ${{ github.event.inputs.terraform_action == 'destroy' }}
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: 1.1.0
      #     tf_actions_subcommand: ${{ github.event.inputs.terraform_action }}
      #     tf_actions_working_dir: "."
      #     tf_actions_comment: true
      #     args: "-auto-approve"

      # - name: Deploy infrastructure to AWS
      # run: |
      #   terraform plan
      #   terraform apply -auto-approve
