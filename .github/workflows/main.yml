name: Deploy to ECR

on:
  push:
    branches: [master]

env:
  AWS_ACCOUNT_NUMBER: ${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}

jobs:
  plan-and-apply:
    name: Build VPC Network Arquitecture
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint. New
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Debug AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}"
          echo "AWS_SESSION_TOKEN: ${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}"
          echo "AWS_REGION: ${{ secrets.TF_VAR_AWS_REGION }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.TF_VAR_AWS_REGION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          mask-password: "false"
          aws-access-key-id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Assume AWS Role
        id: assume-role
        run: |
          role_credentials=$(aws sts assume-role --role-arn arn:aws:iam::${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}:role/github-actions-role --role-session-name GitHubActions | jq -r .Credentials)
          export AWS_ACCESS_KEY_ID=$(echo $role_credentials | jq -r .AccessKeyId)
          export AWS_SECRET_ACCESS_KEY=$(echo $role_credentials | jq -r .SecretAccessKey)
          export AWS_SESSION_TOKEN=$(echo $role_credentials | jq -r .SessionToken)

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "false"

      - name: Debug Login Output
        run: |
          echo "ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}"
          echo "AWS_REGION: ${{ steps.login-ecr.outputs.region }}"

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          chmod +x ./scripts/env/production/version.sh
          ./scripts/env/production/version.sh -v Hotfix
        env:
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: github-actions@github.com

      - name: Install Terraform
        run: |
          chmod +x ./scripts/env/production/terraform.sh
          ./scripts/env/production/terraform.sh

      - name: Deploy infrastructure to AWS
        run: |
           terraform apply -auto-approve \
              -var "TF_VAR_NAME=${{ secrets.TF_VAR_NAME }}" \
              -var "TF_VAR_ENV=${{ secrets.TF_VAR_ENV }}" \
              -var "TF_VAR_VPC_CIDR=${{ secrets.TF_VAR_VPC_CIDR }}" \
              -var "TF_VAR_PUBLIC_SUBNETS_CIDR=${{ secrets.TF_VAR_PUBLIC_SUBNETS_CIDR }}" \
              -var "TF_VAR_PRIVATE_SUBNETS_CIDR=${{ secrets.TF_VAR_PRIVATE_SUBNETS_CIDR }}" \
              -var "TF_VAR_AVAILABILITY_ZONES=${{ secrets.TF_VAR_AVAILABILITY_ZONES }}" \
              -var "TF_VAR_EC2_AMI=${{ secrets.TF_VAR_EC2_AMI }}" \
              -var "TF_VAR_EC2_INSTANCE_TYPE=${{ secrets.TF_VAR_EC2_INSTANCE_TYPE }}" \
              -var "TF_VAR_ENABLE_VPN_GATEWAY=${{ secrets.TF_VAR_ENABLE_VPN_GATEWAY }}" \
              -var "TF_VAR_ENABLE_DNS_HOSTNAMES=${{ secrets.TF_VAR_ENABLE_DNS_HOSTNAMES }}" \
              -var "TF_VAR_ENABLE_DNS_SUPPORT=${{ secrets.TF_VAR_ENABLE_DNS_SUPPORT }}" \
              -var "TF_VAR_TERRAFORM=${{ secrets.TF_VAR_TERRAFORM }}" \
              -var "TF_VAR_AWS_ACCOUNT_ID=${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}" \
              -var "TF_VAR_AWS_REGION=${{ secrets.TF_VAR_AWS_REGION }}" \
              -var "TF_VAR_AWS_PROFILE=${{ secrets.TF_VAR_AWS_PROFILE }}" \
              -var "TF_VAR_AWS_ACCESS_KEY_ID=${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}" \
              -var "TF_VAR_AWS_SECRET_ACCESS_KEY=${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}" \
              -var "TF_VAR_AWS_SESSION_TOKEN=${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}"