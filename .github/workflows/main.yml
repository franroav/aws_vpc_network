name: Cloud Network

on:
  push:
    branches: [master]

env:
  AWS_ACCOUNT_NUMBER: ${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}

jobs:
  plan-and-apply:
    name: Build VPC Network Architecture
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.TF_VAR_AWS_REGION }}

      - name: Assume AWS Role
        id: assume-role
        run: |
          role_credentials=$(aws sts assume-role --role-arn arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:role/github-actions-role --role-session-name GitHubActions | jq -r .Credentials)
          export AWS_ACCESS_KEY_ID=$(echo $role_credentials | jq -r .AccessKeyId)
          export AWS_SECRET_ACCESS_KEY=$(echo $role_credentials | jq -r .SecretAccessKey)
          export AWS_SESSION_TOKEN=$(echo $role_credentials | jq -r .SessionToken)

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          chmod +x ./scripts/env/production/version.sh
          ./scripts/env/production/version.sh -v Hotfix
        env:
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: github-actions@github.com

      - name: Export Terraform variables
        run: |
          export TF_VAR_NAME="${{ secrets.TF_VAR_NAME }}"
          export TF_VAR_ENV="${{ secrets.TF_VAR_ENV }}"
          export TF_VAR_VPC_CIDR="${{ secrets.TF_VAR_VPC_CIDR }}"
          export TF_VAR_PUBLIC_SUBNETS_CIDR="${{ secrets.TF_VAR_PUBLIC_SUBNETS_CIDR }}"
          export TF_VAR_PRIVATE_SUBNETS_CIDR="${{ secrets.TF_VAR_PRIVATE_SUBNETS_CIDR }}"
          export TF_VAR_AVAILABILITY_ZONES="${{ secrets.TF_VAR_AVAILABILITY_ZONES }}"
          export TF_VAR_EC2_AMI="${{ secrets.TF_VAR_EC2_AMI }}"
          export TF_VAR_EC2_INSTANCE_TYPE="${{ secrets.TF_VAR_EC2_INSTANCE_TYPE }}"
          export TF_VAR_ENABLE_VPN_GATEWAY="${{ secrets.TF_VAR_ENABLE_VPN_GATEWAY }}"
          export TF_VAR_ENABLE_DNS_HOSTNAMES="${{ secrets.TF_VAR_ENABLE_DNS_HOSTNAMES }}"
          export TF_VAR_ENABLE_DNS_SUPPORT="${{ secrets.TF_VAR_ENABLE_DNS_SUPPORT }}"
          export TF_VAR_TERRAFORM="${{ secrets.TF_VAR_TERRAFORM }}"
          export TF_VAR_AWS_ACCOUNT_ID="${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}"
          export TF_VAR_AWS_REGION="${{ secrets.TF_VAR_AWS_REGION }}"
          export TF_VAR_AWS_PROFILE="${{ secrets.TF_VAR_AWS_PROFILE }}"
          export TF_VAR_AWS_ACCESS_KEY_ID="${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}"
          export TF_VAR_AWS_SECRET_ACCESS_KEY="${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}"
          export TF_VAR_AWS_SESSION_TOKEN="${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}"

      - name: Terraform Init
        uses: hashicorp/terraform-github-actions@v3
        with:
          tf_actions_version: 1.1.0
          tf_actions_subcommand: "init"
          tf_actions_working_dir: "."

      - name: Terraform plan
        uses: hashicorp/terraform-github-actions@v3
        with:
          tf_actions_version: 1.1.0
          tf_actions_subcommand: "plan"
          tf_actions_working_dir: "."
          args: "-var-file=/home/runner/work/aws_vpc_network/aws_vpc_network/.github/workflows/secrets.tfvars"

      - name: Terraform apply
        if: ${{ github.event.inputs.terraform_action == 'apply' }}
        uses: hashicorp/terraform-github-actions@v3
        with:
          tf_actions_version: 1.1.0
          tf_actions_subcommand: ${{ github.event.inputs.terraform_action }}
          tf_actions_working_dir: "."
          args: "-auto-approve -var-file=/home/runner/work/aws_vpc_network/aws_vpc_network/.github/workflows/secrets.tfvars"

      - name: Terraform destroy
        if: ${{ github.event.inputs.terraform_action == 'destroy' }}
        uses: hashicorp/terraform-github-actions@v3
        with:
          tf_actions_version: 1.1.0
          tf_actions_subcommand: ${{ github.event.inputs.terraform_action }}
          tf_actions_working_dir: "."
          args: "-auto-approve"

          # - name: Deploy infrastructure to AWS
          # run: |
          #   terraform plan
          #   terraform apply -auto-approve
